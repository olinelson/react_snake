{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["BoardLayout","styled","div","props","boardSize","SnakeBody","Apple","EmptySpace","AppContainer","Controls","getRandomBoardPosition","Math","floor","random","defaultGameState","score","gameOver","board","Array","from","length","v","i","snakePosition","applePosition","App","ticker","useRef","clickSound","Audio","crunchSound","errorSound","crossOrigin","boardRef","useState","direction","setDirection","gameState","setGameState","snakeIsAtCoords","r","c","s","useEffect","updateSnakeAndMaybeGrow","newSnakePosition","newHead","play","oldGameState","push","newScore","current","setInterval","splice","goRight","goDown","goLeft","goUp","clearInterval","Modal","error","onOk","okText","title","content","handleKeyDown","e","key","focus","document","addEventListener","removeEventListener","style","gridArea","ref","tabIndex","result","row","uuidv4","printBoard","size","shape","onClick","ArrowUpOutlined","ArrowLeftOutlined","ArrowRightOutlined","ArrowDownOutlined","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.92c67d65.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { v4 as uuidv4 } from 'uuid'\nimport {\n  ArrowRightOutlined, ArrowUpOutlined, ArrowDownOutlined, ArrowLeftOutlined\n} from '@ant-design/icons'\n\nimport styled from 'styled-components'\nimport { Form, Button, Modal, Input } from 'antd'\n\n// import Firebase from './Firebase'\n\nconst BoardLayout = styled.div`\n    display: grid;\n    border: 3px solid black;\n    grid-template-columns: ${props => `repeat(${props.boardSize}, 1fr)`};\n    width: 20rem;\n    height: 20rem;\n    \n    grid-gap: 1px;\n    align-self: center;\n    justify-self: center;\n  `\n\nconst SnakeBody = styled.div`\n    background: black;\n    padding: 1px solid white;\n  `\nconst Apple = styled.div`\n    background: red;\n\n  `\nconst EmptySpace = styled.div`\n    background: white;\n  `\nconst AppContainer = styled.div`\n  height: 100vh;\n  overflow: hidden;\n  width: 100vw;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: auto auto 1fr auto auto 1fr ;\n  align-items: center;\n  justify-items: center;\n  align-content: center;\n  grid-gap: 1rem;\n  grid-template-areas:\n  \"heading\"\n  \"score\"\n  \"game\"\n  \"controls\"\n  \".\"\n  ;\n`\nconst Controls = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 1fr 1fr 1fr;\n  grid-template-areas: \n  \". up .\"\n  \"left . right\"\n  \". down .\"\n  ;\n`\n\n// TODO Hookup to firebase for high scores\n\nconst boardSize = 16\n\nconst getRandomBoardPosition = () => {\n  const min = 0\n  const max = boardSize - 1\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nconst defaultGameState = {\n  score: 0,\n  gameOver: false,\n  board: Array.from({ length: boardSize }, (v, i) => Array.from({ length: boardSize }, (v, i) => 0)),\n  snakePosition: [[1, 1], [1, 2], [1, 3]],\n  applePosition: [getRandomBoardPosition(), getRandomBoardPosition()]\n}\n\nconst App = () => {\n  const gameSpeed = 150\n\n  const ticker = useRef()\n\n  const clickSound = new Audio('./click.mp3')\n  const crunchSound = new Audio('./crunch.mp3')\n  const errorSound = new Audio('./error.mp3')\n  clickSound.crossOrigin = 'anonymous'\n  crunchSound.crossOrigin = 'anonymous'\n  errorSound.crossOrigin = 'anonymous'\n\n  // state\n  const boardRef = useRef(null)\n  const [direction, setDirection] = useState('right')\n  const [gameState, setGameState] = useState(defaultGameState)\n\n  // const [scores, setScores] = useState([])\n\n  // const db = useRef(Firebase.firestore().collection('scores'))\n\n  // const getScores = async () => {\n  //   const scores = []\n\n  //   const snapshot = await db.current.get()\n  //   snapshot.forEach(doc => {\n  //     scores.push(doc.data())\n  //   })\n\n  //   setScores(scores)\n  // }\n\n  const snakeIsAtCoords = (r, c) => {\n    for (const s of gameState.snakePosition) {\n      if (s[0] === r && s[1] === c) return true\n    }\n    return false\n  }\n\n  // const saveScoreAndRestart = (v) => {\n  //   console.log(v)\n  //   setDirection('right')\n  //   setGameState(defaultGameState)\n  // }\n\n  // Print\n  const printBoard = () => {\n    let r = 0\n    const result = []\n\n    for (const row of gameState.board) {\n      let c = 0\n      for (const col of row) {\n        if (snakeIsAtCoords(r, c)) result.push(<SnakeBody key={uuidv4()} />)\n        else if (gameState.applePosition[0] === r && gameState.applePosition[1] === c) result.push(<Apple key={uuidv4()} />)\n        else result.push(<EmptySpace key={uuidv4()} />)\n        c++\n      }\n      r++\n    }\n    return result\n  }\n\n  // Effects\n  useEffect(() => {\n    const resetGame = () => {\n      setDirection('right')\n      setGameState(defaultGameState)\n    }\n\n    // movements\n    const goRight = () => {\n      const newSnakePosition = [...gameState.snakePosition]\n      newSnakePosition.splice(0, 1)\n      const newHead = [...newSnakePosition[newSnakePosition.length - 1]]\n      newHead[1] += 1\n      if (newHead[1] > boardSize - 1) newHead[1] = 0\n      newSnakePosition.push(newHead)\n\n      updateSnakeAndMaybeGrow(newSnakePosition, newHead)\n    }\n\n    const goLeft = () => {\n      const newSnakePosition = [...gameState.snakePosition]\n      newSnakePosition.splice(0, 1)\n      const newHead = [...newSnakePosition[newSnakePosition.length - 1]]\n      newHead[1] -= 1\n      if (newHead[1] < 0) newHead[1] = boardSize - 1\n      newSnakePosition.push(newHead)\n\n      updateSnakeAndMaybeGrow(newSnakePosition, newHead)\n    }\n\n    const goUp = () => {\n      const newSnakePosition = [...gameState.snakePosition]\n      newSnakePosition.splice(0, 1)\n      const newHead = [...newSnakePosition[newSnakePosition.length - 1]]\n      newHead[0] -= 1\n      if (newHead[0] < 0) newHead[0] = boardSize - 1\n      newSnakePosition.push(newHead)\n\n      updateSnakeAndMaybeGrow(newSnakePosition, newHead)\n    }\n\n    const goDown = () => {\n      const newSnakePosition = [...gameState.snakePosition]\n      newSnakePosition.splice(0, 1)\n      const newHead = [...newSnakePosition[newSnakePosition.length - 1]]\n      newHead[0] += 1\n      if (newHead[0] > boardSize - 1) newHead[0] = 0\n      newSnakePosition.push(newHead)\n\n      updateSnakeAndMaybeGrow(newSnakePosition, newHead)\n    }\n\n    const updateSnakeAndMaybeGrow = (newSnakePosition, newHead) => {\n      if (snakeIsAtCoords(newHead[0], newHead[1])) {\n        errorSound.play()\n        setGameState(oldGameState => ({ ...oldGameState, gameOver: true }))\n        return\n      }\n\n      if (gameState.snakePosition[gameState.snakePosition.length - 1][0] === gameState.applePosition[0] && gameState.snakePosition[gameState.snakePosition.length - 1][1] === gameState.applePosition[1]) {\n        crunchSound.play()\n        newSnakePosition.push(newHead)\n        const newScore = gameState.score + 1\n        setGameState(oldGameState => ({\n          ...oldGameState,\n          score: newScore,\n          applePosition: [getRandomBoardPosition(), getRandomBoardPosition()],\n          snakePosition: newSnakePosition\n        }))\n        return\n      }\n\n      setGameState(oldGameState => ({ ...oldGameState, snakePosition: newSnakePosition }))\n    }\n\n    const boardTick = () => {\n      switch (direction) {\n        case 'right':\n          goRight()\n          break\n        case 'down':\n          goDown()\n          break\n        case 'left':\n          goLeft()\n          break\n        case 'up':\n          goUp()\n          break\n        default:\n          break\n      }\n    }\n\n    ticker.current = setInterval(boardTick, gameSpeed)\n\n    if (gameState.gameOver) {\n      clearInterval(ticker.current)\n      Modal.error({ onOk: () => resetGame(), okText: 'Try Again', title: 'Game Over', content: `Your score was ${gameState.score}` })\n    }\n\n    return () => clearInterval(ticker.current)\n  }, [gameState, clickSound, errorSound, crunchSound, direction, snakeIsAtCoords])\n\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      clickSound.play()\n      switch (e.key) {\n        case 'ArrowUp':\n          setDirection('up')\n          break\n        case 'ArrowRight':\n          setDirection('right')\n          break\n        case 'ArrowDown':\n          setDirection('down')\n          break\n        case 'ArrowLeft':\n          setDirection('left')\n          break\n      }\n    }\n\n    boardRef.current.focus()\n    document.addEventListener('keydown', handleKeyDown)\n    // getScores()\n\n    return () => document.removeEventListener('keydown', handleKeyDown)\n  }, [clickSound])\n\n  return (\n    <>\n      <AppContainer>\n        <h1 style={{ gridArea: 'heading' }}>React Snake</h1>\n        <h4 style={{ gridArea: 'score' }}>{gameState.score}</h4>\n\n        <BoardLayout ref={boardRef} style={{ gridArea: 'game' }} boardSize={boardSize} tabIndex='0'>\n          {printBoard()}\n        </BoardLayout>\n\n        <Controls style={{ gridArea: 'controls' }}>\n          <Button size='large' shape='circle' onClick={() => setGameState(oldGameState => ({ ...oldGameState, direction: 'up' }))} style={{ gridArea: 'up' }}><ArrowUpOutlined /></Button>\n          <Button size='large' shape='circle' onClick={() => setGameState(oldGameState => ({ ...oldGameState, direction: 'left' }))} style={{ gridArea: 'left' }}><ArrowLeftOutlined /></Button>\n          <Button size='large' shape='circle' onClick={() => setGameState(oldGameState => ({ ...oldGameState, direction: 'right' }))} style={{ gridArea: 'right' }}><ArrowRightOutlined /></Button>\n          <Button size='large' shape='circle' onClick={() => setGameState(oldGameState => ({ ...oldGameState, direction: 'down' }))} style={{ gridArea: 'down' }}><ArrowDownOutlined /></Button>\n        </Controls>\n      </AppContainer>\n\n      {/* <Modal\n        visible={gameState.gameOver}\n        closable={false}\n        footer={null}\n      >\n        <Form onFinish={(v) => saveScoreAndRestart({ ...v, score: gameState.score })}>\n          <h1>Game Over</h1>\n          <h4>Your Score was: {gameState.score}</h4>\n          <p>Record your name for posterity!</p>\n          <Form.Item name='name' label='Name'>\n            <Input />\n          </Form.Item>\n\n          <Form.Item>\n            <Button type='primary' htmlType='submit'>\n              Play Again\n            </Button>\n          </Form.Item>\n\n        </Form>\n      </Modal> */}\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport 'antd/dist/antd.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}